/*
 * Copyright (c) 2016-2021 Martin Donath <martin.donath@squidfunk.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

import { minify as minhtml } from "html-minifier"
import * as path from "path"
import { concat, merge } from "rxjs"
import { concatMap } from "rxjs/operators"

import { copyAll } from "./copy"
import { base, resolve } from "./resolve"
import {
  transformScript,
  transformStyle
} from "./transform"

/* ----------------------------------------------------------------------------
 * Helper functions
 * ------------------------------------------------------------------------- */

/**
 * Replace file extension
 *
 * @param file - File
 * @param extension - New extension
 *
 * @returns File with new extension
 */
function ext(file: string, extension: string): string {
  return file.replace(path.extname(file), extension)
}

/* ----------------------------------------------------------------------------
 * Program
 * ------------------------------------------------------------------------- */

/* Copy all dependencies */
const dependencies$ = concat(

  /* Copy Material Design icons */
  ...["*.svg", "../LICENSE"]
    .map(pattern => copyAll(pattern, {
      src: "node_modules/@mdi/svg/svg",
      out: `${base}/.icons/material`
    })),

  /* Copy GitHub octicons */
  ...["*.svg", "../../LICENSE"]
    .map(pattern => copyAll(pattern, {
      src: "node_modules/@primer/octicons/build/svg",
      out: `${base}/.icons/octicons`
    })),

  /* Copy FontAwesome icons */
  ...["**/*.svg", "../LICENSE.txt"]
    .map(pattern => copyAll(pattern, {
      src: "node_modules/@fortawesome/fontawesome-free/svgs",
      out: `${base}/.icons/fontawesome`
    })),

  /* Copy Lunr.js search stemmers and segmenter */
  ...["min/*.js", "tinyseg.js"]
    .map(pattern => copyAll(pattern, {
      src: "node_modules/lunr-languages",
      out: `${base}/assets/javascripts/lunr`
    }))
)

/* Copy all assets */
const assets$ = concat(

  /* Copy icons, images and configurations */
  ...[".icons/*.svg", "assets/images/*", "**/*.{py,yml}"]
    .map(pattern => copyAll(pattern, {
      src: "src",
      out: base
    })),

  /* Copy and minify template files */
  copyAll("**/*.html", {
    src: "src",
    out: base,
    transform: async content => {
      const metadata = require("../package.json")
      const banner =
        "{#-\n" +
        "  This file was automatically generated - do not edit\n" +
        "-#}\n"

      /* Normalize line feeds and minify HTML */
      const html = content.replace(/\r\n/gm, "\n")
      return banner + minhtml(html, {
        collapseBooleanAttributes: true,
        includeAutoGeneratedTags: false,
        minifyCSS: true,
        minifyJS: true,
        removeComments: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true
      })

        /* Remove empty lines without collapsing everything */
        .replace(/^\s*[\r\n]/gm, "")

        /* Write theme version into template */
        .replace("$md-name$", metadata.name)
        .replace("$md-version$", metadata.version)
    }
  })
)

/* Transform stylesheets with SASS and PostCSS */
const stylesheets$ = resolve("**/[!_]*.scss", { cwd: "src" })
  .pipe(
    concatMap(file => transformStyle({
      src: `src/${file}`,
      out: ext(`${base}/${file}`, ".css")
    }))
  )

/* Transform scripts with ESBuild */
const javascripts$ = merge(

  /* Transform application */
  transformScript({
    src: "src/assets/javascripts/index.ts",
    out: `${base}/assets/javascripts/bundle.js`
  }),

  /* Transform application overrides */
  transformScript({
    src: "src/overrides/assets/javascripts/index.ts",
    out: `${base}/overrides/assets/javascripts/bundle.js`
  }),

  /* Transform search worker */
  transformScript({
    src: "src/assets/javascripts/integrations/search/worker/main/index.ts",
    out: `${base}/assets/javascripts/worker/search.js`
  })
)

/* Compile everything */
concat(
  dependencies$,
  merge(
    assets$,
    stylesheets$,
    javascripts$
  )
)
  .subscribe()
  // .subscribe(console.log)
